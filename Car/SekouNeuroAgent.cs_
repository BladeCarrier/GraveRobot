using System;
using System.Collections.Generic;
using System.Text;
using Box2DX.Common;
namespace Car
{
    /*
     * Что мы обучаем: 
     * в методе void intelligentSystemCalculateWeights(PerceptParams pp, float t) стоит задача на основании
     *  -PerceptParams, t
     *  -внутренних полей и методов базового класса
     *  -выбранной самообучающейся системы
     * через метод Problem.setCost(int x, int y, double cost) устанавливать и обновлять веса тайлов так, чтобы
     * минимизировать среднее время прохождения роботом от начальной позиции до конечной.
     * Для визуализации и в целях отладки может иметь смысл добавлять отмеченные тайлы в obsts, препятствия в infs,
     * используя автоматический вывод на их на экран.
     * 
     * Если вы также желаете оптимизировать скорость патфайндинга за счёт эвристики, её вы можете прописать через
     * метод Problem.setHeuristic(state sFrom, state sTo, double cost), либо более полно - создав собственный класс
     * наследник Prbl и прописав его в конструкторе SekouNeuroAgent
     */
    class NeuroAgent: dreamerAgent
    {

        public NeuroAgent(Pose initial, Vec2 target,int xtiles = 90, int ytiles = 50 ):base(initial,target,xtiles,ytiles)
        {
            /* Pose initial - начальное положение машины в системе Box2d с перевёрнутым углом (0 - слева, + против часовой),
             * Vec2 target - положение цели в системе Box2d,
             * int xtiles = 90, int ytiles = 50 - ширина и высота массива тайлов для поиска пути. Глубина определяется количеством ориентаций(8).
             */
        }
        /* Содержание dreamerAgent. Работать с ними условимся только в СВОИХ классах, ибо перемены в DreamAgent для 1 наследника могут вывести из строя другой.
         * public Prbl pr  - описание проблемы
         * public DStar ds - система динамического поиска пути.
         * double angle_last = 0, tLast =0 - угол и время на прошлом кадре - для дифференциалов
         * ox = 96.0 / [число тайлов у проблемы в ширину] - расстояние между центрами тайлов по горизонтали, ширина тайла
         * oy = 52.0 / число тайлов у проблемы в высоту - расстояние между центрами тайлов по вертикали, высота тайла
         * xs = 1.0 - абсцисса нулевого (левого) столбца тайлов, расстояние от последнего столбца до края картинки
         * ys = 1.0 - ордината нулевой (верхней) строки тайлов, расстояние от последней строки до края картинки
         * bool goingBack - если истинно, робот перемещается задом. P и D коэффициенты не работают в этом режиме, угол выбирается как сигмоида от расхождения в углах корпуса и направления на цель.
         * int x,y,orientation a - координаты текущего состояния робота в problem.states.
         * List<state> path - система помещает сюда актуальный путь от текущей до конечной точек следования робота. Регулятор работает именно на ЭТОТ путь.
         * List<state> infs - список всех тайлов, которые АГЕНТ СЧИТАЕТ НЕПРЕОДОЛИМЫМИ.
         * Dictionary<state,System.Drawing.Color> obsts - список всех тайлов, базовый вес которых агент определил как ОТЛИЧНЫЙ ОТ 1. Значения словаря - цвет отрисовки.
         * int xn, yn - координаты переднего (пока - единственного) "щупа" агента в системе координат поиска пути.
         * double P = 2, D = 0.3; - PD-регулятор угла поворота и скорости при движении вперёд.
         * orient orienter - хелпер для работы с orientation.
         * enum orientation - все возможные направления
         * Pvel = 0.02, Ivel = 0.01, Dvel = 0.001 - PID регулятор газа по скорости
         * double lastdVel, sumdVel,maxVel = 50,targVel =30; - параметры регуляции по скорости
         */

        public override CarControl react(PerceptParams pp, float t)
        {
            //ВАЖНО!!! для чистоты эксперимента необходимо, чтобы ОТРАБОТКА траектории, а значит, и
            //параметры регулятора и механизм вывода CarControl, были одинаковые или выбирались на равных
            //условиях во всех 7(план максимум) сериях экспериментов: контрольная, сети по базе, деревья по базе,
            //сети с ходу, деревья с ходу, комбинация по базе, комбинация с ходу.

            return base.react(pp, t);
            //выполняется на каждом тике таймера.
            /* Состав PerceptParams:
             * float lidar_cm, lidar_d; - параметры лидара - включите, если хотите, но заставьте его игнорить щуп.
             * float dist, targ_angle; - расстояние и угол до цели.
             * float light, Color color, int features_angle,features_line,int features_gleam - НЕ(!)реализованые параметры изображения.
             * double kaif - как раз наоборот, мера общей ТРУДНОСТИ перемещения сейчас из-за ПРЕПЯТСТВИЙ.
             * double ksurf - мера трудности сдвижения из-за поверхности.
             * Vec2 nose - координаты щупа в Box2D
             * Pose p - координаты робота в Box2D
             * System.Drawing.Image cameraView - Оно самое - изображение из pictureBox2, точнее его КОПИЯ.
             * double velocity - скорость из Box2d
             * 
             * Состав CarControl
             * float u_gas - газ
             * float u_steer - поворот колёс относительно оси "вперёд" машины.
             * float u_brake - тормоза.
             */
        }
        
        override public void intelligentSystemCalculateWeights(PerceptParams pp, float t) 
        {
            //вызывается внутри реакта в тот момент, когда можно безопасно поменять веса.
            //именно здесь (по скромному ежиному мнению) проще всего сделать обновление весов силами нейронки.

            var exapmle_cost = pr.maxCost / 10;

            //алгоритм перевода координат   Box2d  в координаты тайла

           

#warning TODO - нейросеть: вход - изображение, выход наличие препятствий по всем тайлам в зоне видимости. геом преобразование.
#warning TODO - запоминать те тайлы в которых побывали и по ним обучать нейросеть

            pr.setCost(xn, yn, exapmle_cost);
            
            //throw new NotImplementedException("Интеллектуальная система не реализована");
        }

        public static void WorldToTile(float x_, float y_, out int x, out int y, dreamerAgent da, Prbl pr)
        {
            x = Convert.ToInt32(System.Math.Round((x_ - da.xs) / da.ox));
            if (x < 0) x = 0;
            if (x > pr.dx - 1) x = pr.dx - 1;
            y = Convert.ToInt32(System.Math.Round((y_ - da.ys) / da.oy));
            if (y < 0) y = 0;
            if (y > pr.dy - 1) y = pr.dy - 1;
        }

        public static Vec2 VisionToWorld(int kx, int ky, int numx, int numy, PerceptParams pp, GraphicsHelper gh)
        {
            float w=pp.cameraView.Width, h=pp.cameraView.Height;
            float dw=w/numx;
            float dh=h/numy;

            float x = dw * (kx + 0.5f);
            float y = dh * (ky + 0.5f);

            return VisionToWorld(x, y, w, h, Form1.scale*gh.Scale, Form1.dL, pp);
        }

        public static Vec2 VisionToWorld(float px_x, float px_y, float px_w, float px_h, float scale, float dL_px, PerceptParams pp)
        {
            var p0 = new Vec2(px_w / 2, px_h/2 + dL_px);
            var p1 = new Vec2(px_x, px_y);

            var dp=p1-p0;

            var r = dp.Length();
            var a=-Helper.GetRelAngle(0, -1, dp.X, dp.Y, Helper.angle_to_rad*360)+pp.p.angle_rad;
            a *= -1;

            var r1 = r / scale;

            double x = pp.p.xc;
            double y = pp.p.yc;

            x += r1 * System.Math.Cos(a);
            y += r1 * System.Math.Sin(a);

            return new Vec2((float)x, (float)y);
        }


    }
}
